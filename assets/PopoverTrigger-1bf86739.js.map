{"version":3,"file":"PopoverTrigger-1bf86739.js","sources":["../../src/components/Popover/PopoverContext.tsx","../../src/components/Popover/Popover.tsx","../../src/components/Popover/PopoverClose.tsx","../../src/components/Popover/PopoverDescription.tsx","../../src/components/Popover/PopoverHeading.tsx","../../src/components/Popover/PopoverContent.tsx","../../src/components/Popover/PopoverTrigger.tsx"],"sourcesContent":["import {\n    createContext,\n    Dispatch,\n    SetStateAction,\n    useContext,\n    useMemo,\n    useState\n} from \"react\";\nimport {\n    autoUpdate,\n    flip,\n    offset,\n    shift,\n    useClick,\n    useDismiss,\n    useFloating,\n    useInteractions,\n    useRole\n} from \"@floating-ui/react\";\nimport { PopoverProps } from \"./Popover.types\";\n\nexport const usePopover = (\n    {\n        initialOpen = false,\n        placement = \"bottom\",\n        modal,\n        open: controlledOpen,\n        onOpenChange: setControlledOpen\n    }: PopoverProps = {}) => {\n    const [uncontrolledOpen, setUncontrolledOpen] = useState(initialOpen)\n    const [labelId, setLabelId] = useState<string | undefined>()\n    const [descriptionId, setDescriptionId] = useState<\n        string | undefined\n    >()\n\n    const open = controlledOpen ?? uncontrolledOpen\n    const setOpen = setControlledOpen ?? setUncontrolledOpen\n\n    const data = useFloating({\n        placement,\n        open,\n        onOpenChange: setOpen,\n        whileElementsMounted: autoUpdate,\n        middleware: [\n            offset(5),\n            flip({\n                crossAxis: placement.includes(\"-\"),\n                fallbackAxisSideDirection: \"end\",\n                padding: 5\n            }),\n            shift({padding: 5})\n        ]\n    })\n\n    const context = data.context\n\n    const click = useClick(context, {\n        enabled: controlledOpen == null\n    })\n    const dismiss = useDismiss(context)\n    const role = useRole(context)\n\n    const interactions = useInteractions([click, dismiss, role])\n\n    return useMemo(\n        () => ({\n            open,\n            setOpen,\n            ...interactions,\n            ...data,\n            modal,\n            labelId,\n            descriptionId,\n            setLabelId,\n            setDescriptionId\n        }),\n        [open, setOpen, interactions, data, modal, labelId, descriptionId]\n    )\n}\n\ntype ContextType =\n    | (ReturnType<typeof usePopover> & {\n    setLabelId: Dispatch<SetStateAction<string | undefined>>;\n    setDescriptionId: Dispatch<\n        SetStateAction<string | undefined>\n    >\n})\n    | null\n\nexport const PopoverContext = createContext<ContextType>(null)\n\nexport const usePopoverContext = () => {\n    const context = useContext(PopoverContext)\n\n    if (context == null) {\n        throw new Error(\"Popover components must be wrapped in <Popover />\")\n    }\n\n    return context\n}","import { ReactNode } from \"react\";\nimport { PopoverProps } from \"./Popover.types\";\nimport { PopoverContext, usePopover } from \"./PopoverContext\";\n\nexport const Popover = ({\n                            children,\n                            modal = false,\n                            ...restOptions\n                        }: {\n    children: ReactNode\n} & PopoverProps) => {\n    // This can accept any props as options, e.g. `placement`,\n    // or other positioning options.\n    const popover = usePopover({modal, ...restOptions})\n    return (\n        <PopoverContext.Provider value={popover}>\n            {children}\n        </PopoverContext.Provider>\n    )\n}","import { forwardRef } from \"react\";\nimport { usePopoverContext } from \"./PopoverContext\";\nimport Button from \"../Button/Button\";\nimport { ButtonProps } from \"../Button/Button.types\";\n\nexport const PopoverClose = forwardRef<\n    HTMLButtonElement,\n    ButtonProps\n>((props, ref) => {\n    const {setOpen} = usePopoverContext()\n    return (\n        <Button\n            type=\"button\"\n            ref={ref}\n            {...props}\n            onClick={(event) => {\n                props.onClick?.(event)\n                setOpen(false)\n            }}\n        />\n    )\n})\n","import { forwardRef, HTMLProps, useLayoutEffect } from \"react\";\nimport { useId } from \"@floating-ui/react\";\nimport { usePopoverContext } from \"./PopoverContext\";\n\n\nexport const PopoverDescription = forwardRef<\n    HTMLParagraphElement,\n    HTMLProps<HTMLParagraphElement>\n>((props, ref) => {\n    const {setDescriptionId} = usePopoverContext()\n    const id = useId()\n\n    // Only sets `aria-describedby` on the Popover root element\n    // if this component is mounted inside it.\n    useLayoutEffect(() => {\n        setDescriptionId(id)\n        return () => setDescriptionId(undefined)\n    }, [id, setDescriptionId])\n\n    return <p {...props} ref={ref} id={id}/>;\n})","import { forwardRef, HTMLProps, useLayoutEffect } from \"react\";\nimport { useId } from \"@floating-ui/react\";\nimport { usePopoverContext } from \"./PopoverContext\";\n\nexport const PopoverHeading = forwardRef<\n    HTMLHeadingElement,\n    HTMLProps<HTMLHeadingElement>\n>((props, ref) => {\n    const {setLabelId} = usePopoverContext()\n    const id = useId()\n\n    // Only sets `aria-labelledby` on the Popover root element\n    // if this component is mounted inside it.\n    useLayoutEffect(() => {\n        setLabelId(id)\n        return () => setLabelId(undefined)\n    }, [id, setLabelId])\n\n    return (\n        <h2 {...props} ref={ref} id={id}>\n            {props.children}\n        </h2>\n    )\n})","import { forwardRef, HTMLProps } from \"react\";\nimport { FloatingFocusManager, FloatingPortal, useMergeRefs } from \"@floating-ui/react\";\nimport styled from \"styled-components\";\nimport { usePopoverContext } from \"./PopoverContext\";\n\nconst PopoverContainer = styled.div`\n  background-color: white;\n  box-shadow: 0 2px 4px rgba(0, 10, 20, 0.1);\n  border: 1px solid #ddd;\n  font-size: 90%;\n  padding: 4px 8px;\n  border-radius: 4px;\n  box-sizing: border-box;\n  width: max-content;\n  max-width: calc(100vw - 10px);\n`\n\nexport const PopoverContent = forwardRef<\n    HTMLDivElement,\n    HTMLProps<HTMLDivElement>\n>(({style, ...props}, propRef) => {\n    const {context: floatingContext, ...context} = usePopoverContext()\n    const ref = useMergeRefs([context.refs.setFloating, propRef])\n\n    if (!floatingContext.open) return null\n\n    return (\n        <FloatingPortal>\n            <FloatingFocusManager context={floatingContext} modal={context.modal}>\n                <PopoverContainer\n                    ref={ref}\n                    style={{...context.floatingStyles, ...style}}\n                    className=\"gle-popover-container\"\n                    aria-labelledby={context.labelId}\n                    aria-describedby={context.descriptionId}\n                    {...context.getFloatingProps(props)}\n                >\n                    {props.children}\n                </PopoverContainer>\n            </FloatingFocusManager>\n        </FloatingPortal>\n    )\n})","import { cloneElement, forwardRef, HTMLProps, isValidElement } from \"react\";\nimport { useMergeRefs } from \"@floating-ui/react\";\nimport { PopoverTriggerProps } from \"./Popover.types\";\nimport { usePopoverContext } from \"./PopoverContext\";\nimport Button from \"../Button/Button\";\nimport { ButtonProps } from \"../Button/Button.types\";\n\nexport const PopoverTrigger = forwardRef<\n    HTMLElement,\n    HTMLProps<HTMLElement> & PopoverTriggerProps & ButtonProps\n>(({children, asChild = false, ...props}, propRef) => {\n    const context = usePopoverContext()\n    const childrenRef = (children as any).ref\n    const ref = useMergeRefs([context.refs.setReference, propRef, childrenRef])\n\n    // `asChild` allows the user to pass any element as the anchor\n    if (asChild && isValidElement(children)) {\n        return cloneElement(\n            children,\n            context.getReferenceProps({\n                ref,\n                ...props,\n                ...children.props,\n                \"data-state\": context.open ? \"open\" : \"closed\"\n            })\n        )\n    }\n\n    return (\n        <Button\n            ref={ref}\n            // The user can style the trigger based on the state\n            data-state={context.open ? \"open\" : \"closed\"}\n            {...context.getReferenceProps(props)}\n        >\n            {children}\n        </Button>\n    )\n})\n"],"names":["usePopover","initialOpen","placement","modal","controlledOpen","setControlledOpen","uncontrolledOpen","setUncontrolledOpen","useState","labelId","setLabelId","descriptionId","setDescriptionId","open","setOpen","data","useFloating","autoUpdate","offset","flip","shift","context","click","useClick","dismiss","useDismiss","role","useRole","interactions","useInteractions","useMemo","PopoverContext","createContext","usePopoverContext","useContext","Popover","children","restOptions","popover","jsx","PopoverClose","forwardRef","props","ref","Button","event","_a","PopoverDescription","id","useId","useLayoutEffect","PopoverHeading","PopoverContainer","styled","PopoverContent","style","propRef","floatingContext","useMergeRefs","FloatingPortal","FloatingFocusManager","PopoverTrigger","asChild","childrenRef","isValidElement","cloneElement"],"mappings":"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"}