{"version":3,"file":"DialogTrigger-1fde8d74.js","sources":["../../src/components/Dialog/DialogContext.tsx","../../src/components/Dialog/Dialog.tsx","../../src/components/Dialog/DialogClose.tsx","../../src/components/Dialog/DialogDescription.tsx","../../src/components/Dialog/DialogHeading.tsx","../../src/components/Dialog/DialogContent.tsx","../../src/components/Dialog/DialogTrigger.tsx"],"sourcesContent":["import { createContext, Dispatch, SetStateAction, useContext, useMemo, useState } from \"react\";\nimport { useClick, useDismiss, useFloating, useInteractions, useRole } from \"@floating-ui/react\";\nimport { DialogProps } from \"./Dialog.types\";\n\nexport const useDialog = ({\n                              initialOpen = false,\n                              open: controlledOpen,\n                              onOpenChange: setControlledOpen\n                          }: DialogProps = {}) => {\n    const [uncontrolledOpen, setUncontrolledOpen] = useState(initialOpen)\n    const [labelId, setLabelId] = useState<string | undefined>()\n    const [descriptionId, setDescriptionId] = useState<\n        string | undefined\n    >();\n\n    const open = controlledOpen ?? uncontrolledOpen\n    const setOpen = setControlledOpen ?? setUncontrolledOpen\n\n    const data = useFloating({\n        open,\n        onOpenChange: setOpen\n    });\n\n    const context = data.context\n\n    const click = useClick(context, {\n        enabled: controlledOpen == null\n    })\n    const dismiss = useDismiss(context, {outsidePressEvent: \"mousedown\"})\n    const role = useRole(context)\n\n    const interactions = useInteractions([click, dismiss, role])\n\n    return useMemo(\n        () => ({\n            open,\n            setOpen,\n            ...interactions,\n            ...data,\n            labelId,\n            descriptionId,\n            setLabelId,\n            setDescriptionId\n        }),\n        [open, setOpen, interactions, data, labelId, descriptionId]\n    )\n}\n\ntype ContextType =\n    | (ReturnType<typeof useDialog> & {\n    setLabelId: Dispatch<SetStateAction<string | undefined>>\n    setDescriptionId: Dispatch<\n        SetStateAction<string | undefined>\n    >\n})\n    | null\n\nexport const DialogContext = createContext<ContextType>(null)\n\nexport const useDialogContext = () => {\n    const context = useContext(DialogContext)\n\n    if (context == null) {\n        throw new Error(\"Dialog components must be wrapped in <Dialog />\")\n    }\n\n    return context\n}","import { ReactNode } from \"react\";\nimport { DialogProps } from \"./Dialog.types\";\nimport { DialogContext, useDialog } from \"./DialogContext\";\n\nexport const Dialog = (\n    {\n        children,\n        ...options\n    }: {\n        children: ReactNode\n    } & DialogProps) => {\n    const dialog = useDialog(options)\n    return (\n        <DialogContext.Provider value={dialog}>\n            {children}\n        </DialogContext.Provider>\n    )\n}","import { forwardRef } from \"react\";\nimport { useDialogContext } from \"./DialogContext\";\nimport { Button, ButtonProps } from \"../Button\";\n\nexport const DialogClose = forwardRef<\n    HTMLButtonElement,\n    ButtonProps\n>((props: ButtonProps, ref) => {\n    const {setOpen} = useDialogContext()\n    return (\n        <Button {...props} ref={ref} onClick={() => setOpen(false)}/>\n    )\n})\n","import { forwardRef, HTMLProps, useLayoutEffect } from \"react\";\nimport { useId } from \"@floating-ui/react\";\nimport { useDialogContext } from \"./DialogContext\";\n\nexport const DialogDescription = forwardRef<\n    HTMLParagraphElement,\n    HTMLProps<HTMLParagraphElement>\n>(({children, ...props}, ref) => {\n    const {setDescriptionId} = useDialogContext()\n    const id = useId()\n\n    // Only sets `aria-describedby` on the Dialog root element\n    // if this component is mounted inside it.\n    useLayoutEffect(() => {\n        setDescriptionId(id)\n        return () => setDescriptionId(undefined)\n    }, [id, setDescriptionId])\n\n    return (\n        <p {...props} ref={ref} id={id}>\n            {children}\n        </p>\n    )\n})","import { forwardRef, HTMLProps, useLayoutEffect } from \"react\";\nimport { useId } from \"@floating-ui/react\";\nimport { useDialogContext } from \"./DialogContext\";\n\nexport const DialogHeading = forwardRef<\n    HTMLHeadingElement,\n    HTMLProps<HTMLHeadingElement>\n>(({children, ...props}, ref) => {\n    const {setLabelId} = useDialogContext()\n    const id = useId()\n\n    // Only sets `aria-labelledby` on the Dialog root element\n    // if this component is mounted inside it.\n    useLayoutEffect(() => {\n        setLabelId(id)\n        return () => setLabelId(undefined)\n    }, [id, setLabelId])\n\n    return (\n        <h2 {...props} ref={ref} id={id}>\n            {children}\n        </h2>\n    )\n})","import { forwardRef, HTMLProps } from \"react\";\nimport { FloatingFocusManager, FloatingOverlay, FloatingPortal, useMergeRefs } from \"@floating-ui/react\";\nimport { useDialogContext } from \"./DialogContext\";\nimport styled from \"styled-components\";\n\nconst DialogOverlay = styled(FloatingOverlay)`\n  background: rgba(0, 0, 0, 0.8);\n  display: grid;\n  place-items: center;\n`\n\nconst DialogContainer = styled.div`\n  background-color: white;\n  margin: 15px;\n  padding: 15px;\n  border-radius: 4px;\n`\n\nexport const DialogContent = forwardRef<\n    HTMLDivElement,\n    HTMLProps<HTMLDivElement>\n>((props, propRef) => {\n    const {context: floatingContext, ...context} = useDialogContext()\n    const ref = useMergeRefs([context.refs.setFloating, propRef])\n\n    if (!floatingContext.open) return null\n\n    return (\n        <FloatingPortal>\n            <DialogOverlay className=\"gle-dialog-overlay\" lockScroll>\n                <FloatingFocusManager context={floatingContext}>\n                    <DialogContainer\n                        ref={ref}\n                        aria-labelledby={context.labelId}\n                        aria-describedby={context.descriptionId}\n                        className=\"gle-dialog-container\"\n                        {...context.getFloatingProps(props)}\n                    >\n                        {props.children}\n                    </DialogContainer>\n                </FloatingFocusManager>\n            </DialogOverlay>\n        </FloatingPortal>\n    )\n})","import { cloneElement, forwardRef, HTMLProps, isValidElement } from \"react\";\nimport { useMergeRefs } from \"@floating-ui/react\";\nimport { DialogTriggerProps } from \"./Dialog.types\";\nimport { useDialogContext } from \"./DialogContext\";\nimport { Button } from \"../Button\";\n\nexport const DialogTrigger = forwardRef<\n    HTMLElement,\n    HTMLProps<HTMLElement> & DialogTriggerProps\n>(({children, asChild = false, ...props}, propRef) => {\n    const context = useDialogContext()\n    const childrenRef = (children as any).ref\n    const ref = useMergeRefs([context.refs.setReference, propRef, childrenRef])\n\n    // `asChild` allows the user to pass any element as the anchor\n    if (asChild && isValidElement(children)) {\n        return cloneElement(\n            children,\n            context.getReferenceProps({\n                ref,\n                ...props,\n                ...children.props,\n                \"data-state\": context.open ? \"open\" : \"closed\"\n            })\n        )\n    }\n\n    return (\n        <Button\n            ref={ref}\n            // The user can style the trigger based on the state\n            data-state={context.open ? \"open\" : \"closed\"}\n            {...context.getReferenceProps(props)}\n        >\n            {children}\n        </Button>\n    )\n})"],"names":["useDialog","initialOpen","controlledOpen","setControlledOpen","uncontrolledOpen","setUncontrolledOpen","useState","labelId","setLabelId","descriptionId","setDescriptionId","open","setOpen","data","useFloating","context","click","useClick","dismiss","useDismiss","role","useRole","interactions","useInteractions","useMemo","DialogContext","createContext","useDialogContext","useContext","Dialog","children","options","dialog","jsx","DialogClose","forwardRef","props","ref","Button","DialogDescription","id","useId","useLayoutEffect","DialogHeading","DialogOverlay","styled","FloatingOverlay","DialogContainer","DialogContent","propRef","floatingContext","useMergeRefs","FloatingPortal","FloatingFocusManager","DialogTrigger","asChild","childrenRef","isValidElement","cloneElement"],"mappings":"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"}