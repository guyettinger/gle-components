{"version":3,"file":"TooltipTrigger-a31fb0bf.js","sources":["../../src/components/Tooltip/TooltipContext.tsx","../../src/components/Tooltip/Tooltip.tsx","../../src/components/Tooltip/TooltipContent.tsx","../../src/components/Tooltip/TooltipTrigger.tsx"],"sourcesContent":["import { TooltipProps } from \"./Tooltip.types\";\nimport { createContext, useContext, useMemo, useState } from \"react\";\nimport {\n    autoUpdate,\n    flip,\n    offset,\n    shift,\n    useDismiss,\n    useFloating,\n    useFocus,\n    useHover, useInteractions,\n    useRole\n} from \"@floating-ui/react\";\n\nexport const useTooltip = ({\n                               initialOpen = false,\n                               placement = \"top\",\n                               open: controlledOpen,\n                               onOpenChange: setControlledOpen\n                           }: TooltipProps = {}) => {\n    const [uncontrolledOpen, setUncontrolledOpen] = useState(initialOpen)\n\n    const open = controlledOpen ?? uncontrolledOpen\n    const setOpen = setControlledOpen ?? setUncontrolledOpen\n\n    const data = useFloating({\n        placement,\n        open,\n        onOpenChange: setOpen,\n        whileElementsMounted: autoUpdate,\n        middleware: [\n            offset(5),\n            flip({\n                crossAxis: placement.includes(\"-\"),\n                fallbackAxisSideDirection: \"start\",\n                padding: 5\n            }),\n            shift({padding: 5})\n        ]\n    })\n\n    const context = data.context\n\n    const hover = useHover(context, {\n        move: false,\n        enabled: controlledOpen == null\n    })\n    const focus = useFocus(context, {\n        enabled: controlledOpen == null\n    })\n    const dismiss = useDismiss(context)\n    const role = useRole(context, {role: \"tooltip\"})\n\n    const interactions = useInteractions([hover, focus, dismiss, role])\n\n    return useMemo(\n        () => ({\n            open,\n            setOpen,\n            ...interactions,\n            ...data\n        }),\n        [open, setOpen, interactions, data]\n    )\n}\n\ntype ContextType = ReturnType<typeof useTooltip> | null\n\nexport const TooltipContext = createContext<ContextType>(null)\n\nexport const useTooltipContext = () => {\n    const context = useContext(TooltipContext)\n\n    if (context == null) {\n        throw new Error(\"Tooltip components must be wrapped in <Tooltip />\");\n    }\n\n    return context\n}","import { ReactNode } from \"react\";\nimport { TooltipProps } from \"./Tooltip.types\";\nimport { TooltipContext, useTooltip } from \"./TooltipContext\";\n\n\nexport const Tooltip = ({\n                            children,\n                            ...options\n                        }: { children: ReactNode } & TooltipProps) => {\n    // This can accept any props as options, e.g. `placement`,\n    // or other positioning options.\n    const tooltip = useTooltip(options)\n    return (\n        <TooltipContext.Provider value={tooltip}>\n            {children}\n        </TooltipContext.Provider>\n    )\n}","import { forwardRef, HTMLProps } from \"react\";\nimport { FloatingPortal, useMergeRefs } from \"@floating-ui/react\";\nimport styled from \"styled-components\";\nimport { useTooltipContext } from \"./TooltipContext\";\n\nconst TooltipContainer = styled.div`\n  background-color: #444;\n  color: white;\n  font-size: 90%;\n  padding: 4px 8px;\n  border-radius: 4px;\n  box-sizing: border-box;\n  width: max-content;\n  max-width: calc(100vw - 10px);\n`\n\nexport const TooltipContent = forwardRef<\n    HTMLDivElement,\n    HTMLProps<HTMLDivElement>\n>(({style, ...props}, propRef) => {\n    const context = useTooltipContext()\n    const ref = useMergeRefs([context.refs.setFloating, propRef])\n\n    if (!context.open) return null;\n\n    return (\n        <FloatingPortal>\n            <TooltipContainer\n                ref={ref}\n                style={{\n                    ...context.floatingStyles,\n                    ...style\n                }}\n                className=\"gle-tooltip-container\"\n                {...context.getFloatingProps(props)}\n            />\n        </FloatingPortal>\n    )\n})","import { cloneElement, forwardRef, HTMLProps, isValidElement } from \"react\";\nimport { useMergeRefs } from \"@floating-ui/react\";\nimport { useTooltipContext } from \"./TooltipContext\";\nimport Button from \"../Button/Button\";\nimport { ButtonProps } from \"../Button/Button.types\";\n\nexport const TooltipTrigger = forwardRef<\n    HTMLElement,\n    HTMLProps<HTMLElement> & ButtonProps & { asChild?: boolean }\n>(({children, asChild = false, ...props}, propRef) => {\n    const context = useTooltipContext()\n    const childrenRef = (children as any).ref\n    const ref = useMergeRefs([context.refs.setReference, propRef, childrenRef])\n\n    // `asChild` allows the user to pass any element as the anchor\n    if (asChild && isValidElement(children)) {\n        return cloneElement(\n            children,\n            context.getReferenceProps({\n                ref,\n                ...props,\n                ...children.props,\n                \"data-state\": context.open ? \"open\" : \"closed\"\n            })\n        )\n    }\n\n    return (\n        <Button\n            ref={ref}\n            // The user can style the trigger based on the state\n            data-state={context.open ? \"open\" : \"closed\"}\n            {...context.getReferenceProps(props)}\n        >\n            {children}\n        </Button>\n    )\n})"],"names":["useTooltip","initialOpen","placement","controlledOpen","setControlledOpen","uncontrolledOpen","setUncontrolledOpen","useState","open","setOpen","data","useFloating","autoUpdate","offset","flip","shift","context","hover","useHover","focus","useFocus","dismiss","useDismiss","role","useRole","interactions","useInteractions","useMemo","TooltipContext","createContext","useTooltipContext","useContext","Tooltip","children","options","tooltip","jsx","TooltipContainer","styled","TooltipContent","forwardRef","style","props","propRef","ref","useMergeRefs","FloatingPortal","TooltipTrigger","asChild","childrenRef","isValidElement","cloneElement","Button"],"mappings":"yRAcO,MAAAA,EAAA,CAAA,CAAoB,YAAAC,EAAA,GACkB,UAAAC,EAAA,MACF,KAAAC,EACN,aAAAC,CAEV,EAAA,KAAA,CACvB,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAAN,CAAA,EAEAO,EAAAL,GAAAE,EACAI,EAAAL,GAAAE,EAEAI,EAAAC,EAAA,CAAyB,UAAAT,EACrB,KAAAM,EACA,aAAAC,EACc,qBAAAG,EACQ,WAAA,CACVC,EAAA,CAAA,EACAC,EAAA,CACH,UAAAZ,EAAA,SAAA,GAAA,EACgC,0BAAA,QACN,QAAA,CAClB,CAAA,EACZa,EAAA,CAAA,QAAA,EAAA,CACiB,CACtB,CAAA,EAGJC,EAAAN,EAAA,QAEAO,EAAAC,EAAAF,EAAA,CAAgC,KAAA,GACtB,QAAAb,GAAA,IACqB,CAAA,EAE/BgB,EAAAC,EAAAJ,EAAA,CAAgC,QAAAb,GAAA,IACD,CAAA,EAE/BkB,EAAAC,EAAAN,CAAA,EACAO,EAAAC,EAAAR,EAAA,CAAA,KAAA,SAAA,CAAA,EAEAS,EAAAC,EAAA,CAAAT,EAAAE,EAAAE,EAAAE,CAAA,CAAA,EAEA,OAAAI,EAAA,QAAO,KAAA,CACI,KAAAnB,EACH,QAAAC,EACA,GAAAgB,EACG,GAAAf,CACA,GACP,CAAAF,EAAAC,EAAAgB,EAAAf,CAAA,CACkC,CAE1C,EAIOkB,EAAAC,EAAAA,cAAA,IAAA,EAEAC,EAAA,IAAA,CACH,MAAAd,EAAAe,aAAAH,CAAA,EAEA,GAAAZ,GAAA,KACI,MAAA,IAAA,MAAA,mDAAA,EAGJ,OAAAA,CACJ,8wBCzEO,MAAAgB,EAAA,CAAA,CAAiB,SAAAC,EACI,GAAAC,CAEJ,IAAA,CAGpB,MAAAC,EAAAnC,EAAAkC,CAAA,EACA,OAAAE,EAAAR,EAAA,SAAA,CAAA,MAAAO,EAAA,SAAAF,CAAA,CAAA,CAKJ,ovBCZA,MAAAI,EAAAC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWOC,EAAAC,EAAA,WAAA,CAAA,CAAA,MAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAA,CAIH,MAAA3B,EAAAc,IACAc,EAAAC,EAAA,CAAA7B,EAAA,KAAA,YAAA2B,CAAA,CAAA,EAEA,OAAA3B,EAAA,KAEAoB,EAAAU,EAAA,CAAA,SAAAV,EAEQC,EAAC,CAAA,IAAAO,EACG,MAAA,CACO,GAAA5B,EAAA,eACQ,GAAAyB,CACR,EACP,UAAA,wBACU,GAAAzB,EAAA,iBAAA0B,CAAA,CACwB,CAAA,CAAA,CAAA,EAX3B,IAevB,CAAA,kHChCO,MAAAK,EAAAP,EAAAA,WAAA,CAAA,CAAA,SAAAP,EAAA,QAAAe,EAAA,GAAA,GAAAN,CAAA,EAAAC,IAAA,CAIH,MAAA3B,EAAAc,IACAmB,EAAAhB,EAAA,IACAW,EAAAC,EAAA,CAAA7B,EAAA,KAAA,aAAA2B,EAAAM,CAAA,CAAA,EAGA,OAAAD,GAAAE,iBAAAjB,CAAA,EACIkB,EAAA,aAAOlB,EACHjB,EAAA,kBAAA,CAC0B,IAAA4B,EACtB,GAAAF,EACG,GAAAT,EAAA,MACS,aAAAjB,EAAA,KAAA,OAAA,QAC0B,CAAA,CACzC,EAIToB,EACIgB,EAAC,CAAA,IAAAR,EACG,aAAA5B,EAAA,KAAA,OAAA,SAEoC,GAAAA,EAAA,kBAAA0B,CAAA,EACD,SAAAT,CAElC,CAAA,CAGb,CAAA"}